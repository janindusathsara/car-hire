/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package car.hire.view;

import car.hire.controller.CarCategoryController;
import car.hire.dto.CarCategoryDto;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL i5
 */
public class ManageCategoriesPanel extends javax.swing.JPanel {

    CarCategoryController categoryController;

    /**
     * Creates new form ManageCatagoriesPanel
     */
    public ManageCategoriesPanel() {
        categoryController = new CarCategoryController();
        initComponents();
        loadCarCategoryTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageCarCategoriesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        carCategoryTable = new javax.swing.JTable();
        nameLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        nameText = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        manageCarCategoriesLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        manageCarCategoriesLabel.setText("  Manage Car Categories");

        carCategoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        carCategoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carCategoryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(carCategoryTable);

        nameLabel.setText("Name");

        idLabel.setText("ID");

        addButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 153, 153));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(manageCarCategoriesLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(356, 373, Short.MAX_VALUE))
                            .addComponent(nameText)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(manageCarCategoriesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(updateButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addCarCategory();
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        updateCarCategory();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void carCategoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carCategoryTableMouseClicked
        getCarCategory();
    }//GEN-LAST:event_carCategoryTableMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteCarCategory();
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTable carCategoryTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel manageCarCategoriesLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void addCarCategory() {

        try {
            CarCategoryDto categoryDto = new CarCategoryDto(
                    Integer.parseInt(idText.getText()),
                    nameText.getText());

            String result = categoryController.addCarCategory(categoryDto);
            JOptionPane.showMessageDialog(this, result);
            clearPanel();
            loadCarCategoryTable();
        } catch (Exception ex) {
            Logger.getLogger(ManageCategoriesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadCarCategoryTable() {

        try {
            String[] columns = {"ID", "Name"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            carCategoryTable.setModel(dtm);

            ArrayList<CarCategoryDto> categoryDtos = categoryController.getAllCarCategories();

            for (CarCategoryDto categoryDto : categoryDtos) {
                Object[] rawdata = {categoryDto.getId(), categoryDto.getName()};
                dtm.addRow(rawdata);
            }
        } catch (Exception ex) {
            Logger.getLogger(ManageCategoriesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void getCarCategory() {
        try {
            String id = carCategoryTable.getValueAt(carCategoryTable.getSelectedRow(), 0).toString();
            CarCategoryDto dto = categoryController.getCarCategory(id);
            idText.setText(Integer.toString(dto.getId()));
            nameText.setText(dto.getName());
        } catch (Exception ex) {
            Logger.getLogger(ManageCategoriesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private Integer getCategory() {
        Integer carId = (Integer) carCategoryTable.getValueAt(carCategoryTable.getSelectedRow(), 0);
        return carId;
    }

    private void updateCarCategory() {

        Integer categoryId = 0;

        try {
            categoryId = getCategory();

            if (categoryId != 0) {

                try {
                    CarCategoryDto categoryDto = new CarCategoryDto(
                            Integer.parseInt(idText.getText()),
                            nameText.getText());

                    String result = categoryController.updateCarCategory(categoryDto);
                    JOptionPane.showMessageDialog(this, result);
                    clearPanel();
                    loadCarCategoryTable();
                } catch (Exception ex) {
                    Logger.getLogger(ManageCategoriesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Please select a Car Category from the table before update");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Car Category from the table before update");

        }

    }

    private void deleteCarCategory() {

        Integer categoryId = 0;

        try {
            categoryId = getCategory();

            if (categoryId != 0) {

                try {
                    CarCategoryDto categoryDto = new CarCategoryDto(
                            Integer.parseInt(idText.getText()),
                            nameText.getText());
                    String result = categoryController.deleteCarCategory(categoryDto);
                    JOptionPane.showMessageDialog(this, result);
                    clearPanel();
                    loadCarCategoryTable();
                } catch (Exception ex) {
                    Logger.getLogger(ManageCategoriesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Please select a Car Category from the table before delete");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Car Category from the table before delete");

        }

    }

    private void clearPanel() {
        idText.setText("");
        nameText.setText("");
    }

}
