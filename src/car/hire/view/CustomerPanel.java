/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package car.hire.view;

import car.hire.controller.CustomerController;
import car.hire.dto.CustomerDto;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DELL i5
 */
public class CustomerPanel extends javax.swing.JPanel {

    CustomerController customerController;

    /**
     * Creates new form CustomerPanel
     */
    public CustomerPanel() {
        initComponents();
        customerController = new CustomerController();
        loadCustomerTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageCustomerLabel = new javax.swing.JLabel();
        custBodyPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        addCustomerButton = new javax.swing.JButton();
        updateCustomerButton = new javax.swing.JButton();
        deleteCustomerButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 255, 204));

        manageCustomerLabel.setBackground(new java.awt.Color(204, 255, 204));
        manageCustomerLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        manageCustomerLabel.setText("  Manage Customer");

        custBodyPanel.setBackground(new java.awt.Color(204, 255, 204));

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(customerTable);

        addCustomerButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addCustomerButton.setText("Add New Customer");
        addCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButtonActionPerformed(evt);
            }
        });

        updateCustomerButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateCustomerButton.setText("Update Customer");
        updateCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustomerButtonActionPerformed(evt);
            }
        });

        deleteCustomerButton.setBackground(new java.awt.Color(255, 153, 153));
        deleteCustomerButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteCustomerButton.setText("Delete Customer");
        deleteCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerButtonActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Customers", "Rented Customers" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout custBodyPanelLayout = new javax.swing.GroupLayout(custBodyPanel);
        custBodyPanel.setLayout(custBodyPanelLayout);
        custBodyPanelLayout.setHorizontalGroup(
            custBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(custBodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, custBodyPanelLayout.createSequentialGroup()
                .addContainerGap(106, Short.MAX_VALUE)
                .addComponent(deleteCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addCustomerButton)
                .addGap(22, 22, 22))
            .addGroup(custBodyPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        custBodyPanelLayout.setVerticalGroup(
            custBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, custBodyPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addGroup(custBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCustomerButton)
                    .addComponent(updateCustomerButton)
                    .addComponent(deleteCustomerButton))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(manageCustomerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(custBodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageCustomerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(custBodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerButtonActionPerformed
        deleteCustomer();
    }//GEN-LAST:event_deleteCustomerButtonActionPerformed

    private void addCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButtonActionPerformed
        loadCustomerBodyPanel1();
    }//GEN-LAST:event_addCustomerButtonActionPerformed

    private void updateCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerButtonActionPerformed
        Integer custId = 0;
        try {
            custId = getCustomerId();
            if (custId != 0) {
                loadCustomerBodyPanel2(custId);
            } else {
                JOptionPane.showMessageDialog(this, "Please select a Customer from the table before Update");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Customer from the table before Update");
        }
    }//GEN-LAST:event_updateCustomerButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        loadCustomerTable();
    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomerButton;
    private javax.swing.JPanel custBodyPanel;
    private javax.swing.JTable customerTable;
    private javax.swing.JButton deleteCustomerButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel manageCustomerLabel;
    private javax.swing.JButton updateCustomerButton;
    // End of variables declaration//GEN-END:variables

    private void loadCustomerBodyPanel1() {
        custBodyPanel.removeAll();
        CustomerBodyPanel1 customerBodyPanel = new CustomerBodyPanel1();
        customerBodyPanel.setSize(custBodyPanel.getWidth(), custBodyPanel.getHeight());
        custBodyPanel.add(customerBodyPanel);
        custBodyPanel.repaint();
        custBodyPanel.revalidate();
    }

    private void loadCustomerBodyPanel2(Integer custId) {
        custBodyPanel.removeAll();
        CustomerBodyPanel2 customerBodyPane2 = new CustomerBodyPanel2(custId);
        customerBodyPane2.setSize(custBodyPanel.getWidth(), custBodyPanel.getHeight());
        custBodyPanel.add(customerBodyPane2);
        custBodyPanel.repaint();
        custBodyPanel.revalidate();
    }

    private void loadCustomerTable() {
        switch (jComboBox1.getSelectedIndex()) {

            case 1:

                String[] columns = {"ID", "Name", "Address", "NIC", "Mobile No", "DOB"};
                DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                customerTable.setModel(dtm);

                ArrayList<CustomerDto> customerDtos;
                try {
                    customerDtos = customerController.getRentedCustomers();
                    for (CustomerDto customerDto : customerDtos) {
                        Object[] rowData = {customerDto.getId(), customerDto.getTitle() + customerDto.getName(), customerDto.getAddress(), customerDto.getNic(), customerDto.getMobileNo(), customerDto.getDob()};
                        dtm.addRow(rowData);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                break;

            default:

                String[] column = {"ID", "Name", "Address", "NIC", "Mobile No", "DOB"};
                DefaultTableModel dtm1 = new DefaultTableModel(column, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                customerTable.setModel(dtm1);

                ArrayList<CustomerDto> custDtos;
                try {
                    custDtos = customerController.getAllCustomers();
                    for (CustomerDto customerDto : custDtos) {
                        Object[] rowData = {customerDto.getId(), customerDto.getTitle() + customerDto.getName(), customerDto.getAddress(), customerDto.getNic(), customerDto.getMobileNo(), customerDto.getDob()};
                        dtm1.addRow(rowData);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

        }
    }

    private Integer getCustomerId() {
        Integer custId = (Integer) customerTable.getValueAt(customerTable.getSelectedRow(), 0);
        return custId;
    }

    private void deleteCustomer() {
        Integer custId = 0;

        try {

            custId = getCustomerId();

            if (custId != 0) {

                try {
                    String result = customerController.deleteCustomer(custId);
                    JOptionPane.showMessageDialog(this, result);
                    loadCustomerTable();
                } catch (Exception ex) {
                    Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            } else {
                JOptionPane.showMessageDialog(this, "Please select a Customer from the table before Delete");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Customer from the table before Delete");
        }

    }
}
