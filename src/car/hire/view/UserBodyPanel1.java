/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package car.hire.view;

import car.hire.controller.UserController;
import car.hire.dto.UserDto;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL i5
 */
public class UserBodyPanel1 extends javax.swing.JPanel {

    UserController userController;

    /**
     * Creates new form userBodyPanel
     *
     */
    public UserBodyPanel1() {
        initComponents();
        userController = new UserController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addUserLabel = new javax.swing.JLabel();
        uBodyPanel2 = new javax.swing.JPanel();
        registerUserButton = new javax.swing.JButton();
        dobLabel = new javax.swing.JLabel();
        mobileText = new javax.swing.JTextField();
        mobileLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        emailText = new javax.swing.JTextField();
        nicLabel = new javax.swing.JLabel();
        nicText = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        addressText = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        jComboBox = new javax.swing.JComboBox<>();
        nameText = new javax.swing.JTextField();
        userIDLabel = new javax.swing.JLabel();
        userIDText = new javax.swing.JTextField();
        dobDateChooser = new com.toedter.calendar.JDateChooser();

        setBackground(new java.awt.Color(153, 255, 204));

        addUserLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addUserLabel.setForeground(new java.awt.Color(51, 51, 51));
        addUserLabel.setText("Add New User");

        uBodyPanel2.setBackground(new java.awt.Color(153, 255, 204));

        registerUserButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        registerUserButton.setText("Register User");
        registerUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerUserButtonActionPerformed(evt);
            }
        });

        dobLabel.setText("Date Of Birth");

        mobileLabel.setText("Mobile No.");

        emailLabel.setText("Email Address");

        nicLabel.setText("NIC No.");

        addressLabel.setText("Address");

        nameLabel.setText("Name");

        jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mr.", "Mrs.", "Miss.", " " }));

        userIDLabel.setText("User ID");

        userIDText.setToolTipText("");

        dobDateChooser.setDateFormatString("yyyy-MM-dd");

        javax.swing.GroupLayout uBodyPanel2Layout = new javax.swing.GroupLayout(uBodyPanel2);
        uBodyPanel2.setLayout(uBodyPanel2Layout);
        uBodyPanel2Layout.setHorizontalGroup(
            uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uBodyPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(uBodyPanel2Layout.createSequentialGroup()
                        .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addressText))
                    .addGroup(uBodyPanel2Layout.createSequentialGroup()
                        .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(userIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userIDText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(uBodyPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(uBodyPanel2Layout.createSequentialGroup()
                        .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(emailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(mobileLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dobLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nicLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(uBodyPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nicText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mobileText, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dobDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(uBodyPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uBodyPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(registerUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        uBodyPanel2Layout.setVerticalGroup(
            uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uBodyPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nicText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dobLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dobDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mobileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mobileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(uBodyPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(registerUserButton)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addUserLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(uBodyPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uBodyPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void registerUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerUserButtonActionPerformed
        loadUserBodyPanel2();
    }//GEN-LAST:event_registerUserButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addUserLabel;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField addressText;
    private com.toedter.calendar.JDateChooser dobDateChooser;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailText;
    private javax.swing.JComboBox<String> jComboBox;
    private javax.swing.JLabel mobileLabel;
    private javax.swing.JTextField mobileText;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel nicLabel;
    private javax.swing.JTextField nicText;
    private javax.swing.JButton registerUserButton;
    private javax.swing.JPanel uBodyPanel2;
    private javax.swing.JLabel userIDLabel;
    private javax.swing.JTextField userIDText;
    // End of variables declaration//GEN-END:variables

    private void loadUserBodyPanel2() {

        Date dob;
        try {
            dob = dobDateChooser.getDate();

            if ("".equals(nameText.getText()) || "".equals(addressText.getText()) || "".equals(nicText.getText()) || "".equals(mobileText.getText()) || "".equals(emailText.getText())) {
                JOptionPane.showMessageDialog(this, "Please fill your data");
            } else if (validateNic(nicText.getText())) {

                if (validateDob(dobDateChooser.getDate())) {

                    if (validateMobile(mobileText.getText())) {

                        if (validateEmail(emailText.getText())) {

                            UserDto userDto = new UserDto(
                                    Integer.valueOf(userIDText.getText()),
                                    jComboBox.getSelectedItem().toString(),
                                    nameText.getText(),
                                    addressText.getText(),
                                    nicText.getText(),
                                    dob,
                                    mobileText.getText(),
                                    emailText.getText(),
                                    null,
                                    null);

                            uBodyPanel2.removeAll();
                            UserBodyPanel2 userBodyPanel2 = new UserBodyPanel2(userDto);
                            userBodyPanel2.setSize(uBodyPanel2.getWidth(), uBodyPanel2.getHeight());
                            uBodyPanel2.add(userBodyPanel2);
                            uBodyPanel2.repaint();
                            uBodyPanel2.revalidate();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please enter valid Email Address");
                            emailText.setText("");
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Please enter valid Mobile Number");
                        mobileText.setText("");
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Oops! You are minor");
                    dobDateChooser.setDate(null);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Please enter valid NIC Number");
                nicText.setText("");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter your DOB");
        }

    }

    public static Boolean validateMobile(String text) {
        return text.matches("\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}");
    }

    public static boolean validateEmail(String emailAddress) {
        String regexPattern = "^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$";
        return Pattern.compile(regexPattern)
                .matcher(emailAddress)
                .matches();
    }

    public static boolean validateNic(String nic) {
        int length = nic.length();
        char lastChar = nic.charAt(length - 1);

        if (length == 12) {

            for (int i = 0; i < length - 1; i++) {// Check characters are digits
                char currentChar = nic.charAt(i);
                if (currentChar < '0' || '9' < currentChar) {
                    return false;
                } else {
                    return true;
                }
            }

        } else if (length == 10) {

            if (lastChar == 'v' || lastChar == 'V' || lastChar == 'x' || lastChar == 'X') {// Check last character for v, V, x, or X

                for (int i = 0; i < length - 2; i++) {// Check first 9 characters are digits
                    char currentChar = nic.charAt(i);
                    if (currentChar < '0' || '9' < currentChar) {
                        return false;
                    } else {
                        return true;
                    }
                }

            } else {
                return false;
            }

        } else {
            return false;
        }
        return false;
    }

    public static boolean validateDob(Date dob) {
        LocalDate now = LocalDate.now();
        Period diff = Period.between(fromDateToLocalDate(dob), now);
        if (diff.getYears() >= 18) {
            return true;
        } else {
            return false;
        }
    }

    public static LocalDate fromDateToLocalDate(Date date) {
        return Instant.ofEpochMilli(date.getTime())
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }
}
